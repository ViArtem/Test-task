{
  "version": 3,
  "sources": ["../../xmlbuilder/lib/Utility.js", "../../xmlbuilder/lib/XMLDOMImplementation.js", "../../xmlbuilder/lib/XMLDOMErrorHandler.js", "../../xmlbuilder/lib/XMLDOMStringList.js", "../../xmlbuilder/lib/XMLDOMConfiguration.js", "../../xmlbuilder/lib/NodeType.js", "../../xmlbuilder/lib/XMLAttribute.js", "../../xmlbuilder/lib/XMLNamedNodeMap.js", "../../xmlbuilder/lib/XMLElement.js", "../../xmlbuilder/lib/XMLCharacterData.js", "../../xmlbuilder/lib/XMLCData.js", "../../xmlbuilder/lib/XMLComment.js", "../../xmlbuilder/lib/XMLDeclaration.js", "../../xmlbuilder/lib/XMLDTDAttList.js", "../../xmlbuilder/lib/XMLDTDEntity.js", "../../xmlbuilder/lib/XMLDTDElement.js", "../../xmlbuilder/lib/XMLDTDNotation.js", "../../xmlbuilder/lib/XMLDocType.js", "../../xmlbuilder/lib/XMLRaw.js", "../../xmlbuilder/lib/XMLText.js", "../../xmlbuilder/lib/XMLProcessingInstruction.js", "../../xmlbuilder/lib/XMLDummy.js", "../../xmlbuilder/lib/XMLNodeList.js", "../../xmlbuilder/lib/DocumentPosition.js", "../../xmlbuilder/lib/XMLNode.js", "../../xmlbuilder/lib/XMLStringifier.js", "../../xmlbuilder/lib/WriterState.js", "../../xmlbuilder/lib/XMLWriterBase.js", "../../xmlbuilder/lib/XMLStringWriter.js", "../../xmlbuilder/lib/XMLDocument.js", "../../xmlbuilder/lib/XMLDocumentCB.js", "../../xmlbuilder/lib/XMLStreamWriter.js", "../../xmlbuilder/lib/index.js"],
  "sourcesContent": ["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Copies all enumerable own properties from `sources` to `target`\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function(target, ...sources) {\n    var i, key, len, source;\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  // Determines if `val` is a Function object\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  // Determines if `val` is an Object\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  // Determines if `val` is an Array\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  // Determines if `val` is an empty Array or an Object with no own properties\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  // Determines if `val` is a plain Object\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  // Gets the primitive value of an object\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Implements the DOMImplementation interface\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = class XMLDOMImplementation {\n    // Tests if the DOM implementation implements a specific feature.\n\n    // `feature` package name of the feature to test. In Level 1, the\n    //           legal values are \"HTML\" and \"XML\" (case-insensitive).\n    // `version` version number of the package name to test. \n    //           In Level 1, this is the string \"1.0\". If the version is \n    //           not specified, supporting any version of the feature will \n    //           cause the method to return true.\n    hasFeature(feature, version) {\n      return true;\n    }\n\n    // Creates a new document type declaration.\n\n    // `qualifiedName` qualified name of the document type to be created\n    // `publicId` public identifier of the external subset\n    // `systemId` system identifier of the external subset\n    createDocumentType(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Creates a new document.\n\n    // `namespaceURI` namespace URI of the document element to create\n    // `qualifiedName` the qualified name of the document to be created\n    // `doctype` the type of document to be created or null\n    createDocument(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Creates a new HTML document.\n\n    // `title` document title\n    createHTMLDocument(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Returns a specialized object which implements the specialized APIs \n    // of the specified feature and version.\n\n    // `feature` name of the feature requested.\n    // `version` version number of the feature to test\n    getFeature(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Represents the error handler for DOM operations\n  var XMLDOMErrorHandler;\n\n  module.exports = XMLDOMErrorHandler = class XMLDOMErrorHandler {\n    // Initializes a new instance of `XMLDOMErrorHandler`\n\n    constructor() {}\n\n    // Called on the error handler when an error occurs.\n\n    // `error` the error message as a string\n    handleError(error) {\n      throw new Error(error);\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Represents a list of string entries\n  var XMLDOMStringList;\n\n  module.exports = XMLDOMStringList = (function() {\n    class XMLDOMStringList {\n      // Initializes a new instance of `XMLDOMStringList`\n      // This is just a wrapper around an ordinary\n      // JS array.\n\n      // `arr` the array of string values\n      constructor(arr) {\n        this.arr = arr || [];\n      }\n\n      // Returns the indexth item in the collection.\n\n      // `index` index into the collection\n      item(index) {\n        return this.arr[index] || null;\n      }\n\n      // Test if a string is part of this DOMStringList.\n\n      // `str` the string to look for\n      contains(str) {\n        return this.arr.indexOf(str) !== -1;\n      }\n\n    };\n\n    // Returns the number of strings in the list.\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\n      get: function() {\n        return this.arr.length;\n      }\n    });\n\n    return XMLDOMStringList;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n\n  XMLDOMStringList = require('./XMLDOMStringList');\n\n  // Implements the DOMConfiguration interface\n  module.exports = XMLDOMConfiguration = (function() {\n    class XMLDOMConfiguration {\n      constructor() {\n        var clonedSelf;\n        this.defaultParams = {\n          \"canonical-form\": false,\n          \"cdata-sections\": false,\n          \"comments\": false,\n          \"datatype-normalization\": false,\n          \"element-content-whitespace\": true,\n          \"entities\": true,\n          \"error-handler\": new XMLDOMErrorHandler(),\n          \"infoset\": true,\n          \"validate-if-schema\": false,\n          \"namespaces\": true,\n          \"namespace-declarations\": true,\n          \"normalize-characters\": false,\n          \"schema-location\": '',\n          \"schema-type\": '',\n          \"split-cdata-sections\": true,\n          \"validate\": false,\n          \"well-formed\": true\n        };\n        this.params = clonedSelf = Object.create(this.defaultParams);\n      }\n\n      // Gets the value of a parameter.\n\n      // `name` name of the parameter\n      getParameter(name) {\n        if (this.params.hasOwnProperty(name)) {\n          return this.params[name];\n        } else {\n          return null;\n        }\n      }\n\n      // Checks if setting a parameter to a specific value is supported.\n\n      // `name` name of the parameter\n      // `value` parameter value\n      canSetParameter(name, value) {\n        return true;\n      }\n\n      // Sets the value of a parameter.\n\n      // `name` name of the parameter\n      // `value` new value or null if the user wishes to unset the parameter\n      setParameter(name, value) {\n        if (value != null) {\n          return this.params[name] = value;\n        } else {\n          return delete this.params[name];\n        }\n      }\n\n    };\n\n    // Returns the list of parameter names\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n\n    return XMLDOMConfiguration;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  module.exports = {\n    Element: 1,\n    Attribute: 2,\n    Text: 3,\n    CData: 4,\n    EntityReference: 5,\n    EntityDeclaration: 6,\n    ProcessingInstruction: 7,\n    Comment: 8,\n    Document: 9,\n    DocType: 10,\n    DocumentFragment: 11,\n    NotationDeclaration: 12,\n    // Numeric codes up to 200 are reserved to W3C for possible future use.\n    // Following are types internal to this library:\n    Declaration: 201,\n    Raw: 202,\n    AttributeDeclaration: 203,\n    ElementDeclaration: 204,\n    Dummy: 205\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLAttribute, XMLNode;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  // Represents an attribute\n  module.exports = XMLAttribute = (function() {\n    class XMLAttribute {\n      // Initializes a new instance of `XMLAttribute`\n\n      // `parent` the parent node\n      // `name` attribute target\n      // `value` attribute value\n      constructor(parent, name, value) {\n        this.parent = parent;\n        if (this.parent) {\n          this.options = this.parent.options;\n          this.stringify = this.parent.stringify;\n        }\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n        }\n        this.name = this.stringify.name(name);\n        this.value = this.stringify.attValue(value);\n        this.type = NodeType.Attribute;\n        // DOM level 3\n        this.isId = false;\n        this.schemaTypeInfo = null;\n      }\n\n      // Creates and returns a deep clone of `this`\n      clone() {\n        return Object.create(this);\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n      }\n\n      \n      // Returns debug string for this node\n      debugInfo(name) {\n        name = name || this.name;\n        if (name == null) {\n          return \"parent: <\" + this.parent.name + \">\";\n        } else {\n          return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n        }\n      }\n\n      isEqualNode(node) {\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n        if (node.localName !== this.localName) {\n          return false;\n        }\n        if (node.value !== this.value) {\n          return false;\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function() {\n        return true;\n      }\n    });\n\n    return XMLAttribute;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Represents a map of nodes accessed by a string key\n  var XMLNamedNodeMap;\n\n  module.exports = XMLNamedNodeMap = (function() {\n    class XMLNamedNodeMap {\n      // Initializes a new instance of `XMLNamedNodeMap`\n      // This is just a wrapper around an ordinary\n      // JS object.\n\n      // `nodes` the object containing nodes.\n      constructor(nodes) {\n        this.nodes = nodes;\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        // this class should not be cloned since it wraps\n        // around a given object. The calling function should check\n        // whether the wrapped object is null and supply a new object\n        // (from the clone).\n        return this.nodes = null;\n      }\n\n      // DOM Level 1\n      getNamedItem(name) {\n        return this.nodes[name];\n      }\n\n      setNamedItem(node) {\n        var oldNode;\n        oldNode = this.nodes[node.nodeName];\n        this.nodes[node.nodeName] = node;\n        return oldNode || null;\n      }\n\n      removeNamedItem(name) {\n        var oldNode;\n        oldNode = this.nodes[name];\n        delete this.nodes[name];\n        return oldNode || null;\n      }\n\n      item(index) {\n        return this.nodes[Object.keys(this.nodes)[index]] || null;\n      }\n\n      // DOM level 2 functions to be implemented later\n      getNamedItemNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\");\n      }\n\n      setNamedItemNS(node) {\n        throw new Error(\"This DOM method is not implemented.\");\n      }\n\n      removeNamedItemNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\");\n      }\n\n    };\n\n    \n    // DOM level 1\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\n      get: function() {\n        return Object.keys(this.nodes).length || 0;\n      }\n    });\n\n    return XMLNamedNodeMap;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject,\n    hasProp = {}.hasOwnProperty;\n\n  ({isObject, isFunction, getValue} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents an element of the XML document\n  module.exports = XMLElement = (function() {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n        if (attributes != null) {\n          this.attribute(attributes);\n        }\n        // set properties if this is the root node\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this;\n          // set dtd name\n          if (parent.children) {\n            ref = parent.children;\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this);\n        // remove document element\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        }\n        // clone attributes\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        }\n        // clone child nodes\n        clonedSelf.children = [];\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      }\n\n      // Adds or modifies an attribute\n\n      // `name` attribute name\n      // `value` attribute value\n      attribute(name, value) {\n        var attName, attValue;\n        if (name != null) {\n          name = getValue(name);\n        }\n        if (isObject(name)) { // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n          if (this.options.keepNullAttributes && (value == null)) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n        return this;\n      }\n\n      // Removes an attribute\n\n      // `name` attribute name\n      removeAttribute(name) {\n        var attName, j, len;\n        // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n        name = getValue(name);\n        if (Array.isArray(name)) { // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n        return this;\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      }\n\n      // DOM Level 1\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 2\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 3\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 4\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n        if (node.localName !== this.localName) {\n          return false;\n        }\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n        for (i = j = 0, ref = this.attribs.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    return XMLElement;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var XMLCharacterData, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  // Represents a character data node\n  module.exports = XMLCharacterData = (function() {\n    class XMLCharacterData extends XMLNode {\n      // Initializes a new instance of `XMLCharacterData`\n\n      constructor(parent) {\n        super(parent);\n        this.value = '';\n      }\n\n      \n      // Creates and returns a deep clone of `this`\n      clone() {\n        return Object.create(this);\n      }\n\n      // DOM level 1 functions to be implemented later\n      substringData(offset, count) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      appendData(arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      insertData(offset, arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      deleteData(offset, count) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      replaceData(offset, count, arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.data !== this.data) {\n          return false;\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function() {\n        return this.value.length;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    return XMLCharacterData;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCData, XMLCharacterData;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a  CDATA node\n  module.exports = XMLCData = class XMLCData extends XMLCharacterData {\n    // Initializes a new instance of `XMLCData`\n\n    // `text` CDATA text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLComment;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a comment node\n  module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n    // Initializes a new instance of `XMLComment`\n\n    // `text` comment text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents the XML declaration\n  module.exports = XMLDeclaration = class XMLDeclaration extends XMLNode {\n    // Initializes a new instance of `XMLDeclaration`\n\n    // `parent` the document object\n\n    // `version` A version number string, e.g. 1.0\n    // `encoding` Encoding declaration, e.g. UTF-8\n    // `standalone` standalone document declaration: true or false\n    constructor(parent, version, encoding, standalone) {\n      super(parent);\n      // arguments may also be passed as an object\n      if (isObject(version)) {\n        ({version, encoding, standalone} = version);\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    // Converts to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an attribute list\n  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n    // Initializes a new instance of `XMLDTDAttList`\n\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      super(parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an entity declaration in the DTD\n  module.exports = XMLDTDEntity = (function() {\n    class XMLDTDEntity extends XMLNode {\n      // Initializes a new instance of `XMLDTDEntity`\n\n      // `parent` the parent `XMLDocType` element\n      // `pe` whether this is a parameter entity or a general entity\n      //      defaults to `false` (general entity)\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      constructor(parent, pe, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n        }\n        if (value == null) {\n          throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n        }\n        this.pe = !!pe;\n        this.name = this.stringify.name(name);\n        this.type = NodeType.EntityDeclaration;\n        if (!isObject(value)) {\n          this.value = this.stringify.dtdEntityValue(value);\n          this.internal = true;\n        } else {\n          if (!value.pubID && !value.sysID) {\n            throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n          }\n          if (value.pubID && !value.sysID) {\n            throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n          }\n          this.internal = false;\n          if (value.pubID != null) {\n            this.pubID = this.stringify.dtdPubID(value.pubID);\n          }\n          if (value.sysID != null) {\n            this.sysID = this.stringify.dtdSysID(value.sysID);\n          }\n          if (value.nData != null) {\n            this.nData = this.stringify.dtdNData(value.nData);\n          }\n          if (this.pe && this.nData) {\n            throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n          }\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    return XMLDTDEntity;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDElement, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an attribute\n  module.exports = XMLDTDElement = class XMLDTDElement extends XMLNode {\n    // Initializes a new instance of `XMLDTDElement`\n\n    // `parent` the parent `XMLDocType` element\n    // `name` element name\n    // `value` element content (defaults to #PCDATA)\n    constructor(parent, name, value) {\n      super(parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents a NOTATION entry in the DTD\n  module.exports = XMLDTDNotation = (function() {\n    class XMLDTDNotation extends XMLNode {\n      // Initializes a new instance of `XMLDTDNotation`\n\n      // `parent` the parent `XMLDocType` element\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      constructor(parent, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n        }\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.NotationDeclaration;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    return XMLDTDNotation;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents doctype declaration\n  module.exports = XMLDocType = (function() {\n    class XMLDocType extends XMLNode {\n      // Initializes a new instance of `XMLDocType`\n\n      // `parent` the document object\n\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      constructor(parent, pubID, sysID) {\n        var child, i, len, ref;\n        super(parent);\n        this.type = NodeType.DocType;\n        // set DTD name to the name of the root node\n        if (parent.children) {\n          ref = parent.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (child.type === NodeType.Element) {\n              this.name = child.name;\n              break;\n            }\n          }\n        }\n        this.documentObject = parent;\n        // arguments may also be passed as an object\n        if (isObject(pubID)) {\n          ({pubID, sysID} = pubID);\n        }\n        if (sysID == null) {\n          [sysID, pubID] = [pubID, sysID];\n        }\n        if (pubID != null) {\n          this.pubID = this.stringify.dtdPubID(pubID);\n        }\n        if (sysID != null) {\n          this.sysID = this.stringify.dtdSysID(sysID);\n        }\n      }\n\n      // Creates an element type declaration\n\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n      element(name, value) {\n        var child;\n        child = new XMLDTDElement(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates an attribute declaration\n\n      // `elementName` the name of the element containing this attribute\n      // `attributeName` attribute name\n      // `attributeType` type of the attribute (defaults to CDATA)\n      // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n      //                    #DEFAULT) (defaults to #IMPLIED)\n      // `defaultValue` default value of the attribute\n      //                (only used for #FIXED or #DEFAULT)\n      attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        var child;\n        child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a general entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      entity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, false, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a parameter entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      pEntity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, true, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a NOTATION declaration\n\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      notation(name, value) {\n        var child;\n        child = new XMLDTDNotation(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Converts to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      ele(name, value) {\n        return this.element(name, value);\n      }\n\n      att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      }\n\n      ent(name, value) {\n        return this.entity(name, value);\n      }\n\n      pent(name, value) {\n        return this.pEntity(name, value);\n      }\n\n      not(name, value) {\n        return this.notation(name, value);\n      }\n\n      up() {\n        return this.root() || this.documentObject;\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.name !== this.name) {\n          return false;\n        }\n        if (node.publicId !== this.publicId) {\n          return false;\n        }\n        if (node.systemId !== this.systemId) {\n          return false;\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    // DOM level 2\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    return XMLDocType;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLNode, XMLRaw;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  // Represents a  raw node\n  module.exports = XMLRaw = class XMLRaw extends XMLNode {\n    // Initializes a new instance of `XMLRaw`\n\n    // `text` raw text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLText;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a text node\n  module.exports = XMLText = (function() {\n    class XMLText extends XMLCharacterData {\n      // Initializes a new instance of `XMLText`\n\n      // `text` element text\n      constructor(parent, text) {\n        super(parent);\n        if (text == null) {\n          throw new Error(\"Missing element text. \" + this.debugInfo());\n        }\n        this.name = \"#text\";\n        this.type = NodeType.Text;\n        this.value = this.stringify.text(text);\n      }\n\n      // Creates and returns a deep clone of `this`\n      clone() {\n        return Object.create(this);\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.text(this, this.options.writer.filterOptions(options));\n      }\n\n      // DOM level 1 functions to be implemented later\n      splitText(offset) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 3 functions to be implemented later\n      replaceWholeText(content) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n    };\n\n    // DOM level 3\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    return XMLText;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDummy, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents a  raw node\n  module.exports = XMLDummy = class XMLDummy extends XMLNode {\n    // Initializes a new instance of `XMLDummy`\n\n    // `XMLDummy` is a special node representing a node with \n    // a null value. Dummy nodes are created while recursively\n    // building the XML tree. Simply skipping null values doesn't\n    // work because that would break the recursive chain.\n    constructor(parent) {\n      super(parent);\n      this.type = NodeType.Dummy;\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return '';\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Represents a list of nodes\n  var XMLNodeList;\n\n  module.exports = XMLNodeList = (function() {\n    class XMLNodeList {\n      // Initializes a new instance of `XMLNodeList`\n      // This is just a wrapper around an ordinary\n      // JS array.\n\n      // `nodes` the array containing nodes.\n      constructor(nodes) {\n        this.nodes = nodes;\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        // this class should not be cloned since it wraps\n        // around a given array. The calling function should check\n        // whether the wrapped array is null and supply a new array\n        // (from the clone).\n        return this.nodes = null;\n      }\n\n      // DOM Level 1\n      item(index) {\n        return this.nodes[index] || null;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\n      get: function() {\n        return this.nodes.length || 0;\n      }\n    });\n\n    return XMLNodeList;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  module.exports = {\n    Disconnected: 1,\n    Preceding: 2,\n    Following: 4,\n    Contains: 8,\n    ContainedBy: 16,\n    ImplementationSpecific: 32\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject,\n    hasProp = {}.hasOwnProperty,\n    splice = [].splice;\n\n  ({isObject, isFunction, isEmpty, getValue} = require('./Utility'));\n\n  XMLElement = null;\n\n  XMLCData = null;\n\n  XMLComment = null;\n\n  XMLDeclaration = null;\n\n  XMLDocType = null;\n\n  XMLRaw = null;\n\n  XMLText = null;\n\n  XMLProcessingInstruction = null;\n\n  XMLDummy = null;\n\n  NodeType = null;\n\n  XMLNodeList = null;\n\n  XMLNamedNodeMap = null;\n\n  DocumentPosition = null;\n\n  // Represents a generic XMl element\n  module.exports = XMLNode = (function() {\n    class XMLNode {\n      // Initializes a new instance of `XMLNode`\n\n      // `parent` the parent node\n      constructor(parent1) {\n        this.parent = parent1;\n        if (this.parent) {\n          this.options = this.parent.options;\n          this.stringify = this.parent.stringify;\n        }\n        this.value = null;\n        this.children = [];\n        this.baseURI = null;\n        // first execution, load dependencies that are otherwise\n        // circular (so we can't load them at the top)\n        if (!XMLElement) {\n          XMLElement = require('./XMLElement');\n          XMLCData = require('./XMLCData');\n          XMLComment = require('./XMLComment');\n          XMLDeclaration = require('./XMLDeclaration');\n          XMLDocType = require('./XMLDocType');\n          XMLRaw = require('./XMLRaw');\n          XMLText = require('./XMLText');\n          XMLProcessingInstruction = require('./XMLProcessingInstruction');\n          XMLDummy = require('./XMLDummy');\n          NodeType = require('./NodeType');\n          XMLNodeList = require('./XMLNodeList');\n          XMLNamedNodeMap = require('./XMLNamedNodeMap');\n          DocumentPosition = require('./DocumentPosition');\n        }\n      }\n\n      \n      // Sets the parent node of this node and its children recursively\n\n      // `parent` the parent node\n      setParent(parent) {\n        var child, j, len, ref1, results;\n        this.parent = parent;\n        if (parent) {\n          this.options = parent.options;\n          this.stringify = parent.stringify;\n        }\n        ref1 = this.children;\n        results = [];\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          results.push(child.setParent(this));\n        }\n        return results;\n      }\n\n      // Creates a child element node\n\n      // `name` node name or an object describing the XML tree\n      // `attributes` an object containing name/value pairs of attributes\n      // `text` element text\n      element(name, attributes, text) {\n        var childNode, item, j, k, key, lastChild, len, len1, val;\n        lastChild = null;\n        if (attributes === null && (text == null)) {\n          [attributes, text] = [{}, null];\n        }\n        if (attributes == null) {\n          attributes = {};\n        }\n        attributes = getValue(attributes);\n        // swap argument order: text <-> attributes\n        if (!isObject(attributes)) {\n          [text, attributes] = [attributes, text];\n        }\n        if (name != null) {\n          name = getValue(name);\n        }\n        // expand if array\n        if (Array.isArray(name)) {\n          for (j = 0, len = name.length; j < len; j++) {\n            item = name[j];\n            lastChild = this.element(item);\n          }\n        // evaluate if function\n        } else if (isFunction(name)) {\n          lastChild = this.element(name.apply());\n        // expand if object\n        } else if (isObject(name)) {\n          for (key in name) {\n            if (!hasProp.call(name, key)) continue;\n            val = name[key];\n            if (isFunction(val)) {\n              // evaluate if function\n              val = val.apply();\n            }\n            // assign attributes\n            if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n              lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n            // skip empty arrays\n            } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n              lastChild = this.dummy();\n            // empty objects produce one node\n            } else if (isObject(val) && isEmpty(val)) {\n              lastChild = this.element(key);\n            // skip null and undefined nodes\n            } else if (!this.options.keepNullNodes && (val == null)) {\n              lastChild = this.dummy();\n            \n            // expand list by creating child nodes\n            } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n              for (k = 0, len1 = val.length; k < len1; k++) {\n                item = val[k];\n                childNode = {};\n                childNode[key] = item;\n                lastChild = this.element(childNode);\n              }\n            \n            // expand child nodes under parent\n            } else if (isObject(val)) {\n              // if the key is #text expand child nodes under this node to support mixed content\n              if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n                lastChild = this.element(val);\n              } else {\n                lastChild = this.element(key);\n                lastChild.element(val);\n              }\n            } else {\n              \n              // text node\n              lastChild = this.element(key, val);\n            }\n          }\n        // skip null nodes\n        } else if (!this.options.keepNullNodes && text === null) {\n          lastChild = this.dummy();\n        } else {\n          // text node\n          if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n            lastChild = this.text(text);\n          // cdata node\n          } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n            lastChild = this.cdata(text);\n          // comment node\n          } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n            lastChild = this.comment(text);\n          // raw text node\n          } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n            lastChild = this.raw(text);\n          // processing instruction\n          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n            lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n          } else {\n            // element node\n            lastChild = this.node(name, attributes, text);\n          }\n        }\n        if (lastChild == null) {\n          throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n        }\n        return lastChild;\n      }\n\n      // Creates a child element node before the current node\n\n      // `name` node name or an object describing the XML tree\n      // `attributes` an object containing name/value pairs of attributes\n      // `text` element text\n      insertBefore(name, attributes, text) {\n        var child, i, newChild, refChild, removed;\n        // DOM level 1\n        // insertBefore(newChild, refChild) inserts the child node newChild before refChild\n        if (name != null ? name.type : void 0) {\n          newChild = name;\n          refChild = attributes;\n          newChild.setParent(this);\n          if (refChild) {\n            // temporarily remove children starting *with* refChild\n            i = children.indexOf(refChild);\n            removed = children.splice(i);\n            \n            // add the new child\n            children.push(newChild);\n            \n            // add back removed children after new child\n            Array.prototype.push.apply(children, removed);\n          } else {\n            children.push(newChild);\n          }\n          return newChild;\n        } else {\n          if (this.isRoot) {\n            throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n          }\n          \n          // temporarily remove children starting *with* this\n          i = this.parent.children.indexOf(this);\n          removed = this.parent.children.splice(i);\n          \n          // add the new child\n          child = this.parent.element(name, attributes, text);\n          \n          // add back removed children after new child\n          Array.prototype.push.apply(this.parent.children, removed);\n          return child;\n        }\n      }\n\n      // Creates a child element node after the current node\n\n      // `name` node name or an object describing the XML tree\n      // `attributes` an object containing name/value pairs of attributes\n      // `text` element text\n      insertAfter(name, attributes, text) {\n        var child, i, removed;\n        if (this.isRoot) {\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n        }\n        \n        // temporarily remove children starting *after* this\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i + 1);\n        \n        // add the new child\n        child = this.parent.element(name, attributes, text);\n        \n        // add back removed children after new child\n        Array.prototype.push.apply(this.parent.children, removed);\n        return child;\n      }\n\n      // Deletes a child element node\n\n      remove() {\n        var i, ref1;\n        if (this.isRoot) {\n          throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n        }\n        i = this.parent.children.indexOf(this);\n        splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;\n        return this.parent;\n      }\n\n      // Creates a node\n\n      // `name` name of the node\n      // `attributes` an object containing name/value pairs of attributes\n      // `text` element text\n      node(name, attributes, text) {\n        var child;\n        if (name != null) {\n          name = getValue(name);\n        }\n        attributes || (attributes = {});\n        attributes = getValue(attributes);\n        // swap argument order: text <-> attributes\n        if (!isObject(attributes)) {\n          [text, attributes] = [attributes, text];\n        }\n        child = new XMLElement(this, name, attributes);\n        if (text != null) {\n          child.text(text);\n        }\n        this.children.push(child);\n        return child;\n      }\n\n      // Creates a text node\n\n      // `value` element text\n      text(value) {\n        var child;\n        if (isObject(value)) {\n          this.element(value);\n        }\n        child = new XMLText(this, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a CDATA node\n\n      // `value` element text without CDATA delimiters\n      cdata(value) {\n        var child;\n        child = new XMLCData(this, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a comment node\n\n      // `value` comment text\n      comment(value) {\n        var child;\n        child = new XMLComment(this, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a comment node before the current node\n\n      // `value` comment text\n      commentBefore(value) {\n        var child, i, removed;\n        // temporarily remove children starting *with* this\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        // add the new child\n        child = this.parent.comment(value);\n        // add back removed children after new child\n        Array.prototype.push.apply(this.parent.children, removed);\n        return this;\n      }\n\n      // Creates a comment node after the current node\n\n      // `value` comment text\n      commentAfter(value) {\n        var child, i, removed;\n        // temporarily remove children starting *after* this\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i + 1);\n        // add the new child\n        child = this.parent.comment(value);\n        // add back removed children after new child\n        Array.prototype.push.apply(this.parent.children, removed);\n        return this;\n      }\n\n      // Adds unescaped raw text\n\n      // `value` text\n      raw(value) {\n        var child;\n        child = new XMLRaw(this, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Adds a dummy node\n      dummy() {\n        var child;\n        child = new XMLDummy(this);\n        // Normally when a new node is created it is added to the child node collection.\n        // However, dummy nodes are never added to the XML tree. They are created while\n        // converting JS objects to XML nodes in order not to break the recursive function\n        // chain. They can be thought of as invisible nodes. They can be traversed through\n        // by using prev(), next(), up(), etc. functions but they do not exists in the tree.\n\n        // @children.push child\n        return child;\n      }\n\n      // Adds a processing instruction\n\n      // `target` instruction target\n      // `value` instruction value\n      instruction(target, value) {\n        var insTarget, insValue, instruction, j, len;\n        if (target != null) {\n          target = getValue(target);\n        }\n        if (value != null) {\n          value = getValue(value);\n        }\n        if (Array.isArray(target)) { // expand if array\n          for (j = 0, len = target.length; j < len; j++) {\n            insTarget = target[j];\n            this.instruction(insTarget);\n          }\n        } else if (isObject(target)) { // expand if object\n          for (insTarget in target) {\n            if (!hasProp.call(target, insTarget)) continue;\n            insValue = target[insTarget];\n            this.instruction(insTarget, insValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n          instruction = new XMLProcessingInstruction(this, target, value);\n          this.children.push(instruction);\n        }\n        return this;\n      }\n\n      // Creates a processing instruction node before the current node\n\n      // `target` instruction target\n      // `value` instruction value\n      instructionBefore(target, value) {\n        var child, i, removed;\n        // temporarily remove children starting *with* this\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        // add the new child\n        child = this.parent.instruction(target, value);\n        // add back removed children after new child\n        Array.prototype.push.apply(this.parent.children, removed);\n        return this;\n      }\n\n      // Creates a processing instruction node after the current node\n\n      // `target` instruction target\n      // `value` instruction value\n      instructionAfter(target, value) {\n        var child, i, removed;\n        // temporarily remove children starting *after* this\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i + 1);\n        // add the new child\n        child = this.parent.instruction(target, value);\n        // add back removed children after new child\n        Array.prototype.push.apply(this.parent.children, removed);\n        return this;\n      }\n\n      // Creates the xml declaration\n\n      // `version` A version number string, e.g. 1.0\n      // `encoding` Encoding declaration, e.g. UTF-8\n      // `standalone` standalone document declaration: true or false\n      declaration(version, encoding, standalone) {\n        var doc, xmldec;\n        doc = this.document();\n        xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n        // Replace XML declaration if exists, otherwise insert at top\n        if (doc.children.length === 0) {\n          doc.children.unshift(xmldec);\n        } else if (doc.children[0].type === NodeType.Declaration) {\n          doc.children[0] = xmldec;\n        } else {\n          doc.children.unshift(xmldec);\n        }\n        return doc.root() || doc;\n      }\n\n      // Creates the document type declaration\n\n      // `pubID` the public identifier of the external subset\n      // `sysID` the system identifier of the external subset\n      dtd(pubID, sysID) {\n        var child, doc, doctype, i, j, k, len, len1, ref1, ref2;\n        doc = this.document();\n        doctype = new XMLDocType(doc, pubID, sysID);\n        ref1 = doc.children;\n        // Replace DTD if exists\n        for (i = j = 0, len = ref1.length; j < len; i = ++j) {\n          child = ref1[i];\n          if (child.type === NodeType.DocType) {\n            doc.children[i] = doctype;\n            return doctype;\n          }\n        }\n        ref2 = doc.children;\n        // insert before root node if the root node exists\n        for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {\n          child = ref2[i];\n          if (child.isRoot) {\n            doc.children.splice(i, 0, doctype);\n            return doctype;\n          }\n        }\n        // otherwise append to end\n        doc.children.push(doctype);\n        return doctype;\n      }\n\n      // Gets the parent node\n      up() {\n        if (this.isRoot) {\n          throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n        }\n        return this.parent;\n      }\n\n      // Gets the root node\n      root() {\n        var node;\n        node = this;\n        while (node) {\n          if (node.type === NodeType.Document) {\n            return node.rootObject;\n          } else if (node.isRoot) {\n            return node;\n          } else {\n            node = node.parent;\n          }\n        }\n      }\n\n      // Gets the node representing the XML document\n      document() {\n        var node;\n        node = this;\n        while (node) {\n          if (node.type === NodeType.Document) {\n            return node;\n          } else {\n            node = node.parent;\n          }\n        }\n      }\n\n      // Ends the document and converts string\n      end(options) {\n        return this.document().end(options);\n      }\n\n      // Gets the previous node\n      prev() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        if (i < 1) {\n          throw new Error(\"Already at the first node. \" + this.debugInfo());\n        }\n        return this.parent.children[i - 1];\n      }\n\n      // Gets the next node\n      next() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        if (i === -1 || i === this.parent.children.length - 1) {\n          throw new Error(\"Already at the last node. \" + this.debugInfo());\n        }\n        return this.parent.children[i + 1];\n      }\n\n      // Imports cloned root from another XML document\n\n      // `doc` the XML document to insert nodes from\n      importDocument(doc) {\n        var child, clonedRoot, j, len, ref1;\n        clonedRoot = doc.root().clone();\n        clonedRoot.parent = this;\n        clonedRoot.isRoot = false;\n        this.children.push(clonedRoot);\n        // set properties if imported element becomes the root node\n        if (this.type === NodeType.Document) {\n          clonedRoot.isRoot = true;\n          clonedRoot.documentObject = this;\n          this.rootObject = clonedRoot;\n          // set dtd name\n          if (this.children) {\n            ref1 = this.children;\n            for (j = 0, len = ref1.length; j < len; j++) {\n              child = ref1[j];\n              if (child.type === NodeType.DocType) {\n                child.name = clonedRoot.name;\n                break;\n              }\n            }\n          }\n        }\n        return this;\n      }\n\n      \n      // Returns debug string for this node\n      debugInfo(name) {\n        var ref1, ref2;\n        name = name || this.name;\n        if ((name == null) && !((ref1 = this.parent) != null ? ref1.name : void 0)) {\n          return \"\";\n        } else if (name == null) {\n          return \"parent: <\" + this.parent.name + \">\";\n        } else if (!((ref2 = this.parent) != null ? ref2.name : void 0)) {\n          return \"node: <\" + name + \">\";\n        } else {\n          return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n        }\n      }\n\n      // Aliases\n      ele(name, attributes, text) {\n        return this.element(name, attributes, text);\n      }\n\n      nod(name, attributes, text) {\n        return this.node(name, attributes, text);\n      }\n\n      txt(value) {\n        return this.text(value);\n      }\n\n      dat(value) {\n        return this.cdata(value);\n      }\n\n      com(value) {\n        return this.comment(value);\n      }\n\n      ins(target, value) {\n        return this.instruction(target, value);\n      }\n\n      doc() {\n        return this.document();\n      }\n\n      dec(version, encoding, standalone) {\n        return this.declaration(version, encoding, standalone);\n      }\n\n      e(name, attributes, text) {\n        return this.element(name, attributes, text);\n      }\n\n      n(name, attributes, text) {\n        return this.node(name, attributes, text);\n      }\n\n      t(value) {\n        return this.text(value);\n      }\n\n      d(value) {\n        return this.cdata(value);\n      }\n\n      c(value) {\n        return this.comment(value);\n      }\n\n      r(value) {\n        return this.raw(value);\n      }\n\n      i(target, value) {\n        return this.instruction(target, value);\n      }\n\n      u() {\n        return this.up();\n      }\n\n      // can be deprecated in a future release\n      importXMLBuilder(doc) {\n        return this.importDocument(doc);\n      }\n\n      // Adds or modifies an attribute.\n\n      // `name` attribute name\n      // `value` attribute value\n      attribute(name, value) {\n        throw new Error(\"attribute() applies to element nodes only.\");\n      }\n\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      }\n\n      // Removes an attribute\n\n      // `name` attribute name\n      removeAttribute(name) {\n        throw new Error(\"attribute() applies to element nodes only.\");\n      }\n\n      // DOM level 1 functions to be implemented later\n      replaceChild(newChild, oldChild) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeChild(oldChild) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      appendChild(newChild) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasChildNodes() {\n        return this.children.length !== 0;\n      }\n\n      cloneNode(deep) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      normalize() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 2\n      isSupported(feature, version) {\n        return true;\n      }\n\n      hasAttributes() {\n        return this.attribs.length !== 0;\n      }\n\n      // DOM level 3 functions to be implemented later\n      compareDocumentPosition(other) {\n        var ref, res;\n        ref = this;\n        if (ref === other) {\n          return 0;\n        } else if (this.document() !== other.document()) {\n          res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n          if (Math.random() < 0.5) {\n            res |= DocumentPosition.Preceding;\n          } else {\n            res |= DocumentPosition.Following;\n          }\n          return res;\n        } else if (ref.isAncestor(other)) {\n          return DocumentPosition.Contains | DocumentPosition.Preceding;\n        } else if (ref.isDescendant(other)) {\n          return DocumentPosition.Contains | DocumentPosition.Following;\n        } else if (ref.isPreceding(other)) {\n          return DocumentPosition.Preceding;\n        } else {\n          return DocumentPosition.Following;\n        }\n      }\n\n      isSameNode(other) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      lookupPrefix(namespaceURI) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isDefaultNamespace(namespaceURI) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      lookupNamespaceURI(prefix) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref1;\n        if (node.nodeType !== this.nodeType) {\n          return false;\n        }\n        if (node.children.length !== this.children.length) {\n          return false;\n        }\n        for (i = j = 0, ref1 = this.children.length - 1; (0 <= ref1 ? j <= ref1 : j >= ref1); i = 0 <= ref1 ? ++j : --j) {\n          if (!this.children[i].isEqualNode(node.children[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      getFeature(feature, version) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setUserData(key, data, handler) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getUserData(key) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // Returns true if other is an inclusive descendant of node,\n      // and false otherwise.\n      contains(other) {\n        if (!other) {\n          return false;\n        }\n        return other === this || this.isDescendant(other);\n      }\n\n      // An object A is called a descendant of an object B, if either A is \n      // a child of B or A is a child of an object C that is a descendant of B.\n      isDescendant(node) {\n        var child, isDescendantChild, j, len, ref1;\n        ref1 = this.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          if (node === child) {\n            return true;\n          }\n          isDescendantChild = child.isDescendant(node);\n          if (isDescendantChild) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      // An object A is called an ancestor of an object B if and only if\n      // B is a descendant of A.\n      isAncestor(node) {\n        return node.isDescendant(this);\n      }\n\n      // An object A is preceding an object B if A and B are in the \n      // same tree and A comes before B in tree order.\n      isPreceding(node) {\n        var nodePos, thisPos;\n        nodePos = this.treePosition(node);\n        thisPos = this.treePosition(this);\n        if (nodePos === -1 || thisPos === -1) {\n          return false;\n        } else {\n          return nodePos < thisPos;\n        }\n      }\n\n      // An object A is folllowing an object B if A and B are in the \n      // same tree and A comes after B in tree order.\n      isFollowing(node) {\n        var nodePos, thisPos;\n        nodePos = this.treePosition(node);\n        thisPos = this.treePosition(this);\n        if (nodePos === -1 || thisPos === -1) {\n          return false;\n        } else {\n          return nodePos > thisPos;\n        }\n      }\n\n      // Returns the preorder position of the given node in the tree, or -1\n      // if the node is not in the tree.\n      treePosition(node) {\n        var found, pos;\n        pos = 0;\n        found = false;\n        this.foreachTreeNode(this.document(), function(childNode) {\n          pos++;\n          if (!found && childNode === node) {\n            return found = true;\n          }\n        });\n        if (found) {\n          return pos;\n        } else {\n          return -1;\n        }\n      }\n\n      \n      // Depth-first preorder traversal through the XML tree\n      foreachTreeNode(node, func) {\n        var child, j, len, ref1, res;\n        node || (node = this.document());\n        ref1 = node.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          if (res = func(child)) {\n            return res;\n          } else {\n            res = this.foreachTreeNode(child, func);\n            if (res) {\n              return res;\n            }\n          }\n        }\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\n      get: function() {\n        return this.value;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\n      get: function() {\n        if (!this.childNodeList || !this.childNodeList.nodes) {\n          this.childNodeList = new XMLNodeList(this.children);\n        }\n        return this.childNodeList;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\n      get: function() {\n        return this.children[0] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\n      get: function() {\n        return this.children[this.children.length - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i + 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\n      get: function() {\n        return this.document() || null;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\n      get: function() {\n        var child, j, len, ref1, str;\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n          str = '';\n          ref1 = this.children;\n          for (j = 0, len = ref1.length; j < len; j++) {\n            child = ref1[j];\n            if (child.textContent) {\n              str += child.textContent;\n            }\n          }\n          return str;\n        } else {\n          return null;\n        }\n      },\n      set: function(value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    return XMLNode;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  // Converts values to strings\n  var XMLStringifier,\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      // `options.invalidCharReplacement` a character to replace invalid characters and disable character validation\n      constructor(options) {\n        var key, ref, value;\n        // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalChar = this.assertLegalChar.bind(this);\n        // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n        ref = options.stringify || {};\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      }\n\n      // Defaults\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalName('' + val || '');\n      }\n\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return '' + val || '';\n      }\n\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n        return val;\n      }\n\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      assertLegalChar(str) {\n        var regex, res;\n        if (this.options.noValidation) {\n          return str;\n        }\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g;\n          if (this.options.invalidCharReplacement !== void 0) {\n            str = str.replace(regex, this.options.invalidCharReplacement);\n          } else if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n        return str;\n      }\n\n      assertLegalName(str) {\n        var regex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        str = this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n        if (!str.match(regex)) {\n          throw new Error(`Invalid character in name: ${str}`);\n        }\n        return str;\n      }\n\n      // Escapes special characters in text\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      textEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      }\n\n      // Escapes special characters in attribute values\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      attEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&(lt|gt|amp|apos|quot);)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n\n    };\n\n    // strings to match while converting from JS objects\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    return XMLStringifier;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  module.exports = {\n    None: 0,\n    OpenTag: 1,\n    InsideTag: 2,\n    CloseTag: 3\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  ({assign} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw || e.type === NodeType.CData) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw || firstChildNode.type === NodeType.CData) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw || child.type === NodeType.CData) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var XMLStringWriter, XMLWriterBase;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  // Prints XML nodes as plain text\n  module.exports = XMLStringWriter = class XMLStringWriter extends XMLWriterBase {\n    // Initializes a new instance of `XMLStringWriter`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      super(options);\n    }\n\n    document(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      // remove trailing newline\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject;\n\n  ({isPlainObject} = require('./Utility'));\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  // Represents an XML builder\n  module.exports = XMLDocument = (function() {\n    class XMLDocument extends XMLNode {\n      // Initializes a new instance of `XMLDocument`\n\n      // `options.keepNullNodes` whether nodes with null values will be kept\n      //     or ignored: true or false\n      // `options.keepNullAttributes` whether attributes with null values will be\n      //     kept or ignored: true or false\n      // `options.ignoreDecorators` whether decorator strings will be ignored when\n      //     converting JS objects: true or false\n      // `options.separateArrayItems` whether array items are created as separate\n      //     nodes when passed as an object value: true or false\n      // `options.noDoubleEncoding` whether existing html entities are encoded:\n      //     true or false\n      // `options.stringify` a set of functions to use for converting values to\n      //     strings\n      // `options.writer` the default XML writer to use for converting nodes to\n      //     string. If the default writer is not set, the built-in XMLStringWriter\n      //     will be used instead.\n      constructor(options) {\n        super(null);\n        this.name = \"#document\";\n        this.type = NodeType.Document;\n        this.documentURI = null;\n        this.domConfig = new XMLDOMConfiguration();\n        options || (options = {});\n        if (!options.writer) {\n          options.writer = new XMLStringWriter();\n        }\n        this.options = options;\n        this.stringify = new XMLStringifier(options);\n      }\n\n      // Ends the document and passes it to the given XML writer\n\n      // `writer` is either an XML writer or a plain object to pass to the\n      // constructor of the default XML writer. The default writer is assigned when\n      // creating the XML document. Following flags are recognized by the\n      // built-in XMLStringWriter:\n      //   `writer.pretty` pretty prints the result\n      //   `writer.indent` indentation for pretty print\n      //   `writer.offset` how many indentations to add to every line for pretty print\n      //   `writer.newline` newline sequence for pretty print\n      end(writer) {\n        var writerOptions;\n        writerOptions = {};\n        if (!writer) {\n          writer = this.options.writer;\n        } else if (isPlainObject(writer)) {\n          writerOptions = writer;\n          writer = this.options.writer;\n        }\n        return writer.document(this, writer.filterOptions(writerOptions));\n      }\n\n      // Converts the XML document to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.document(this, this.options.writer.filterOptions(options));\n      }\n\n      // DOM level 1 functions to be implemented later\n      createElement(tagName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createDocumentFragment() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createTextNode(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createComment(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createCDATASection(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createProcessingInstruction(target, data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createAttribute(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createEntityReference(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 2 functions to be implemented later\n      importNode(importedNode, deep) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createElementNS(namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createAttributeNS(namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementById(elementId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 3 functions to be implemented later\n      adoptNode(source) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      normalizeDocument() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      renameNode(node, namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 4 functions to be implemented later\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createEvent(eventInterface) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createRange() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createNodeIterator(root, whatToShow, filter) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createTreeWalker(root, whatToShow, filter) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    return XMLDocument;\n\n  }).call(this);\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject,\n    hasProp = {}.hasOwnProperty;\n\n  ({isObject, isFunction, isPlainObject, getValue} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLElement = require('./XMLElement');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  WriterState = require('./WriterState');\n\n  // Represents an XML builder\n  module.exports = XMLDocumentCB = class XMLDocumentCB {\n    // Initializes a new instance of `XMLDocumentCB`\n\n    // `options.keepNullNodes` whether nodes with null values will be kept\n    //     or ignored: true or false\n    // `options.keepNullAttributes` whether attributes with null values will be\n    //     kept or ignored: true or false\n    // `options.ignoreDecorators` whether decorator strings will be ignored when\n    //     converting JS objects: true or false\n    // `options.separateArrayItems` whether array items are created as separate\n    //     nodes when passed as an object value: true or false\n    // `options.noDoubleEncoding` whether existing html entities are encoded:\n    //     true or false\n    // `options.stringify` a set of functions to use for converting values to\n    //     strings\n    // `options.writer` the default XML writer to use for converting nodes to\n    //     string. If the default writer is not set, the built-in XMLStringWriter\n    //     will be used instead.\n\n    // `onData` the function to be called when a new chunk of XML is output. The\n    //          string containing the XML chunk is passed to `onData` as its first\n    //          argument, and the current indentation level as its second argument.\n    // `onEnd`  the function to be called when the XML document is completed with\n    //          `end`. `onEnd` does not receive any arguments.\n    constructor(options, onData, onEnd) {\n      var writerOptions;\n      this.name = \"?xml\";\n      this.type = NodeType.Document;\n      options || (options = {});\n      writerOptions = {};\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      } else if (isPlainObject(options.writer)) {\n        writerOptions = options.writer;\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.writer = options.writer;\n      this.writerOptions = this.writer.filterOptions(writerOptions);\n      this.stringify = new XMLStringifier(options);\n      this.onDataCallback = onData || function() {};\n      this.onEndCallback = onEnd || function() {};\n      this.currentNode = null;\n      this.currentLevel = -1;\n      this.openTags = {};\n      this.documentStarted = false;\n      this.documentCompleted = false;\n      this.root = null;\n    }\n\n    // Creates a child element node from the given XMLNode\n\n    // `node` the child node\n    createChildNode(node) {\n      var att, attName, attributes, child, i, len, ref, ref1;\n      switch (node.type) {\n        case NodeType.CData:\n          this.cdata(node.value);\n          break;\n        case NodeType.Comment:\n          this.comment(node.value);\n          break;\n        case NodeType.Element:\n          attributes = {};\n          ref = node.attribs;\n          for (attName in ref) {\n            if (!hasProp.call(ref, attName)) continue;\n            att = ref[attName];\n            attributes[attName] = att.value;\n          }\n          this.node(node.name, attributes);\n          break;\n        case NodeType.Dummy:\n          this.dummy();\n          break;\n        case NodeType.Raw:\n          this.raw(node.value);\n          break;\n        case NodeType.Text:\n          this.text(node.value);\n          break;\n        case NodeType.ProcessingInstruction:\n          this.instruction(node.target, node.value);\n          break;\n        default:\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n      }\n      ref1 = node.children;\n      // write child nodes recursively\n      for (i = 0, len = ref1.length; i < len; i++) {\n        child = ref1[i];\n        this.createChildNode(child);\n        if (child.type === NodeType.Element) {\n          this.up();\n        }\n      }\n      return this;\n    }\n\n    // Creates a dummy node\n\n    dummy() {\n      // no-op, just return this\n      return this;\n    }\n\n    // Creates a node\n\n    // `name` name of the node\n    // `attributes` an object containing name/value pairs of attributes\n    // `text` element text\n    node(name, attributes, text) {\n      if (name == null) {\n        throw new Error(\"Missing node name.\");\n      }\n      if (this.root && this.currentLevel === -1) {\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n      }\n      this.openCurrent();\n      name = getValue(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      // swap argument order: text <-> attributes\n      if (!isObject(attributes)) {\n        [text, attributes] = [attributes, text];\n      }\n      this.currentNode = new XMLElement(this, name, attributes);\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      if (text != null) {\n        this.text(text);\n      }\n      return this;\n    }\n\n    // Creates a child element node or an element type declaration when called\n    // inside the DTD\n\n    // `name` name of the node\n    // `attributes` an object containing name/value pairs of attributes\n    // `text` element text\n    element(name, attributes, text) {\n      var child, i, len, oldValidationFlag, ref, root;\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        this.dtdElement(...arguments);\n      } else {\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n          oldValidationFlag = this.options.noValidation;\n          this.options.noValidation = true;\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\n          root.element(name);\n          this.options.noValidation = oldValidationFlag;\n          ref = root.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            this.createChildNode(child);\n            if (child.type === NodeType.Element) {\n              this.up();\n            }\n          }\n        } else {\n          this.node(name, attributes, text);\n        }\n      }\n      return this;\n    }\n\n    // Adds or modifies an attribute\n\n    // `name` attribute name\n    // `value` attribute value\n    attribute(name, value) {\n      var attName, attValue;\n      if (!this.currentNode || this.currentNode.children) {\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) { // expand if object\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    }\n\n    // Creates a text node\n\n    // `value` element text\n    text(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLText(this, value);\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates a CDATA node\n\n    // `value` element text without CDATA delimiters\n    cdata(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLCData(this, value);\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates a comment node\n\n    // `value` comment text\n    comment(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLComment(this, value);\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Adds unescaped raw text\n\n    // `value` text\n    raw(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLRaw(this, value);\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Adds a processing instruction\n\n    // `target` instruction target\n    // `value` instruction value\n    instruction(target, value) {\n      var i, insTarget, insValue, len, node;\n      this.openCurrent();\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) { // expand if array\n        for (i = 0, len = target.length; i < len; i++) {\n          insTarget = target[i];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) { // expand if object\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        node = new XMLProcessingInstruction(this, target, value);\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      }\n      return this;\n    }\n\n    // Creates the xml declaration\n\n    // `version` A version number string, e.g. 1.0\n    // `encoding` Encoding declaration, e.g. UTF-8\n    // `standalone` standalone document declaration: true or false\n    declaration(version, encoding, standalone) {\n      var node;\n      this.openCurrent();\n      if (this.documentStarted) {\n        throw new Error(\"declaration() must be the first node.\");\n      }\n      node = new XMLDeclaration(this, version, encoding, standalone);\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates the document type declaration\n\n    // `root`  the name of the root node\n    // `pubID` the public identifier of the external subset\n    // `sysID` the system identifier of the external subset\n    doctype(root, pubID, sysID) {\n      this.openCurrent();\n      if (root == null) {\n        throw new Error(\"Missing root node name.\");\n      }\n      if (this.root) {\n        throw new Error(\"dtd() must come before the root node.\");\n      }\n      this.currentNode = new XMLDocType(this, pubID, sysID);\n      this.currentNode.rootNodeName = root;\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      return this;\n    }\n\n    // Creates an element type declaration\n\n    // `name` element name\n    // `value` element content (defaults to #PCDATA)\n    dtdElement(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDElement(this, name, value);\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates an attribute declaration\n\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute (defaults to CDATA)\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n    //                    #DEFAULT) (defaults to #IMPLIED)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates a general entity declaration\n\n    // `name` the name of the entity\n    // `value` internal entity value or an object with external entity details\n    // `value.pubID` public identifier\n    // `value.sysID` system identifier\n    // `value.nData` notation declaration\n    entity(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, false, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates a parameter entity declaration\n\n    // `name` the name of the entity\n    // `value` internal entity value or an object with external entity details\n    // `value.pubID` public identifier\n    // `value.sysID` system identifier\n    pEntity(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, true, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Creates a NOTATION declaration\n\n    // `name` the name of the notation\n    // `value` an object with external entity details\n    // `value.pubID` public identifier\n    // `value.sysID` system identifier\n    notation(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDNotation(this, name, value);\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    }\n\n    // Gets the parent node\n    up() {\n      if (this.currentLevel < 0) {\n        throw new Error(\"The document node has no parent.\");\n      }\n      if (this.currentNode) {\n        if (this.currentNode.children) {\n          this.closeNode(this.currentNode);\n        } else {\n          this.openNode(this.currentNode);\n        }\n        this.currentNode = null;\n      } else {\n        this.closeNode(this.openTags[this.currentLevel]);\n      }\n      delete this.openTags[this.currentLevel];\n      this.currentLevel--;\n      return this;\n    }\n\n    // Ends the document\n    end() {\n      while (this.currentLevel >= 0) {\n        this.up();\n      }\n      return this.onEnd();\n    }\n\n    // Opens the current parent node\n    openCurrent() {\n      if (this.currentNode) {\n        this.currentNode.children = true;\n        return this.openNode(this.currentNode);\n      }\n    }\n\n    // Writes the opening tag of the current node or the entire node if it has\n    // no child nodes\n    openNode(node) {\n      var att, chunk, name, ref;\n      if (!node.isOpen) {\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n          this.root = node;\n        }\n        chunk = '';\n        if (node.type === NodeType.Element) {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\n          ref = node.attribs;\n          for (name in ref) {\n            if (!hasProp.call(ref, name)) continue;\n            att = ref[name];\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n          }\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\n          this.writerOptions.state = WriterState.InsideTag; // if node.type is NodeType.DocType\n        } else {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\n          \n          // external identifier\n          if (node.pubID && node.sysID) {\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\n          }\n          \n          // internal subset\n          if (node.children) {\n            chunk += ' [';\n            this.writerOptions.state = WriterState.InsideTag;\n          } else {\n            this.writerOptions.state = WriterState.CloseTag;\n            chunk += '>';\n          }\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.onData(chunk, this.currentLevel);\n        return node.isOpen = true;\n      }\n    }\n\n    // Writes the closing tag of the current node\n    closeNode(node) {\n      var chunk;\n      if (!node.isClosed) {\n        chunk = '';\n        this.writerOptions.state = WriterState.CloseTag;\n        if (node.type === NodeType.Element) {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel); // if node.type is NodeType.DocType\n        } else {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.writerOptions.state = WriterState.None;\n        this.onData(chunk, this.currentLevel);\n        return node.isClosed = true;\n      }\n    }\n\n    // Called when a new chunk of XML is output\n\n    // `chunk` a string containing the XML chunk\n    // `level` current indentation level\n    onData(chunk, level) {\n      this.documentStarted = true;\n      return this.onDataCallback(chunk, level + 1);\n    }\n\n    // Called when the XML document is completed\n    onEnd() {\n      this.documentCompleted = true;\n      return this.onEndCallback();\n    }\n\n    // Returns debug string\n    debugInfo(name) {\n      if (name == null) {\n        return \"\";\n      } else {\n        return \"node: <\" + name + \">\";\n      }\n    }\n\n    // Node aliases\n    ele() {\n      return this.element(...arguments);\n    }\n\n    nod(name, attributes, text) {\n      return this.node(name, attributes, text);\n    }\n\n    txt(value) {\n      return this.text(value);\n    }\n\n    dat(value) {\n      return this.cdata(value);\n    }\n\n    com(value) {\n      return this.comment(value);\n    }\n\n    ins(target, value) {\n      return this.instruction(target, value);\n    }\n\n    dec(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    }\n\n    dtd(root, pubID, sysID) {\n      return this.doctype(root, pubID, sysID);\n    }\n\n    e(name, attributes, text) {\n      return this.element(name, attributes, text);\n    }\n\n    n(name, attributes, text) {\n      return this.node(name, attributes, text);\n    }\n\n    t(value) {\n      return this.text(value);\n    }\n\n    d(value) {\n      return this.cdata(value);\n    }\n\n    c(value) {\n      return this.comment(value);\n    }\n\n    r(value) {\n      return this.raw(value);\n    }\n\n    i(target, value) {\n      return this.instruction(target, value);\n    }\n\n    // Attribute aliases\n    att() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList(...arguments);\n      } else {\n        return this.attribute(...arguments);\n      }\n    }\n\n    a() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList(...arguments);\n      } else {\n        return this.attribute(...arguments);\n      }\n    }\n\n    // DTD aliases\n    // att() and ele() are defined above\n    ent(name, value) {\n      return this.entity(name, value);\n    }\n\n    pent(name, value) {\n      return this.pEntity(name, value);\n    }\n\n    not(name, value) {\n      return this.notation(name, value);\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  WriterState = require('./WriterState');\n\n  // Prints XML nodes to a stream\n  module.exports = XMLStreamWriter = class XMLStreamWriter extends XMLWriterBase {\n    // Initializes a new instance of `XMLStreamWriter`\n\n    // `stream` output stream\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(stream, options) {\n      super(options);\n      this.stream = stream;\n    }\n\n    endline(node, options, level) {\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n        return '';\n      } else {\n        return super.endline(node, options, level);\n      }\n    }\n\n    document(doc, options) {\n      var child, i, j, k, len1, len2, ref, ref1, results;\n      ref = doc.children;\n      // set a flag so that we don't insert a newline after the last root level node \n      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {\n        child = ref[i];\n        child.isLastRootNode = i === doc.children.length - 1;\n      }\n      options = this.filterOptions(options);\n      ref1 = doc.children;\n      results = [];\n      for (k = 0, len2 = ref1.length; k < len2; k++) {\n        child = ref1[k];\n        results.push(this.writeChildNode(child, options, 0));\n      }\n      return results;\n    }\n\n    cdata(node, options, level) {\n      return this.stream.write(super.cdata(node, options, level));\n    }\n\n    comment(node, options, level) {\n      return this.stream.write(super.comment(node, options, level));\n    }\n\n    declaration(node, options, level) {\n      return this.stream.write(super.declaration(node, options, level));\n    }\n\n    docType(node, options, level) {\n      var child, j, len1, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level));\n      this.stream.write('<!DOCTYPE ' + node.root().name);\n      // external identifier\n      if (node.pubID && node.sysID) {\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n      } else if (node.sysID) {\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        this.stream.write(' [');\n        this.stream.write(this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (j = 0, len1 = ref.length; j < len1; j++) {\n          child = ref[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(']');\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      this.stream.write(options.spaceBeforeSlash + '>');\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, j, len, len1, name, prettySuppressed, r, ratt, ref, ref1, ref2, rline;\n      level || (level = 0);\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      this.stream.write(r);\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw || e.type === NodeType.CData) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          this.stream.write('>');\n          options.state = WriterState.CloseTag;\n          this.stream.write('</' + node.name + '>');\n        } else {\n          options.state = WriterState.CloseTag;\n          this.stream.write(options.spaceBeforeSlash + '/>');\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw || firstChildNode.type === NodeType.CData) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        this.stream.write('>');\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        this.stream.write('</' + node.name + '>');\n      } else {\n        this.stream.write('>' + this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref2 = node.children;\n        // inner tags\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\n          child = ref2[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\n      }\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    }\n\n    processingInstruction(node, options, level) {\n      return this.stream.write(super.processingInstruction(node, options, level));\n    }\n\n    raw(node, options, level) {\n      return this.stream.write(super.raw(node, options, level));\n    }\n\n    text(node, options, level) {\n      return this.stream.write(super.text(node, options, level));\n    }\n\n    dtdAttList(node, options, level) {\n      return this.stream.write(super.dtdAttList(node, options, level));\n    }\n\n    dtdElement(node, options, level) {\n      return this.stream.write(super.dtdElement(node, options, level));\n    }\n\n    dtdEntity(node, options, level) {\n      return this.stream.write(super.dtdEntity(node, options, level));\n    }\n\n    dtdNotation(node, options, level) {\n      return this.stream.write(super.dtdNotation(node, options, level));\n    }\n\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction;\n\n  ({assign, isFunction} = require('./Utility'));\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  // Creates a new document and returns the root node for\n  // chain-building the document tree\n\n  // `name` name of the root element\n\n  // `xmldec.version` A version number string, e.g. 1.0\n  // `xmldec.encoding` Encoding declaration, e.g. UTF-8\n  // `xmldec.standalone` standalone document declaration: true or false\n\n  // `doctype.pubID` public identifier of the external subset\n  // `doctype.sysID` system identifier of the external subset\n\n  // `options.headless` whether XML declaration and doctype will be included:\n  //     true or false\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    // create the document node\n    doc = new XMLDocument(options);\n    // add the root node\n    root = doc.element(name);\n    // prolog\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  // Creates a new document and returns the document node for\n  // chain-building the document tree\n\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n\n  // `onData` the function to be called when a new chunk of XML is output. The\n  //          string containing the XML chunk is passed to `onData` as its single\n  //          argument.\n  // `onEnd`  the function to be called when the XML document is completed with\n  //          `end`. `onEnd` does not receive any arguments.\n  module.exports.begin = function(options, onData, onEnd) {\n    if (isFunction(options)) {\n      [onData, onEnd] = [options, onData];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n"],
  "mappings": "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",
  "names": ["XMLDOMStringList", "XMLDOMConfiguration", "XMLAttribute", "XMLNamedNodeMap", "XMLElement", "XMLCharacterData", "XMLDTDEntity", "XMLDTDNotation", "XMLDocType", "XMLText", "XMLNodeList", "XMLNode", "XMLStringifier", "XMLDocument"]
}
